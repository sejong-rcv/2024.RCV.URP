#아래 2개 명령어로 opencv 해당 버전 설치하고 시작
# !pip install opencv-python==3.4.2.17
# !pip install opencv-contrib-python==3.4.2.17

import cv2
import numpy as np

#1. img 불러오기
################################################
#아래 영역 채우기



################################################


# 2. SIFT 추출기 생성 후 keypoint와 descriptor 계산
# xfeatures2d.SIFT_create , detectAndCompute 함수 사용
################################################
#아래 영역 채우기



################################################


# 3. BFMatcher 함수를 사용해서 각 이미지의 descriptor 매칭하고, 좋은 매칭쌍 순으로 정렬
################################################
#아래 영역 채우기



################################################


# 4. drawMatches 함수를 사용해서 각 이미지에서 찾은 keypoint 를 매칭시킨 뒤 이미지로 확인
# (시각화 할때, 정렬된 매칭쌍 중 상위 n개만 선택해서 시각화 하기)
################################################



################################################


# 5. 상위 n개의 matching 쌍에 해당하는 각 이미지별 keypoint를 리스트에 추가
# (matching 쌍에서 queryIdx 와 trainIdx 를 사용)
################################################
point_img1 = []
point_img2 = []

for m in matches:
    #######################
    pass
    #######################
    
point_img1 = np.asarray(point_img1)
point_img2 = np.asarray(point_img2) 
################################################


# 6. findHomography 를 사용해서 각 이미지의 point pairs 사이의 homography 계산하기
################################################



################################################


#7. warpPerspective 를 사용해서 img2를 img1 으로 warping 하기!
#8. 이후 warping된 이미지와 나머지 이미지를 합쳐서 panorama 이미지 구성하기
################################################



################################################